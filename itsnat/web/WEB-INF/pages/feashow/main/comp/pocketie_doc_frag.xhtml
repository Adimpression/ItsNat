
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
</head>
<body>

<div class="explanation">
    <p>Pocket IE 6 (as included in Windows Mobile 6 and 6.1), Motorola Symphony (included in phones like ROKR EM35 or MOTO VE66)
    and <a href="http://www.uc.cn/English/index.shtml">UCWEB</a>,
    are limited mobile browsers, the most important limitation is only a small subset
    of elements can receive events (mainly mouse events).
    </p>
    <p>These examples show how to build markup and components ready to work in these browsers
    and in any other supported browser by ItsNat.
    </p>
    <p>This approach is <i>direct</i> usually adding links to the markup of templates,
       another approach used by the Feature Showcase is adding dynamically these links
       when components are created and with some support of mutation events,
       this approach is used in any other example of the Feature Showcase, that is,
       the initial markup used is not ready to work with Pocket IE/Symphony/UCWEB (is not "polluted" with links
       not needed by other browsers). See <code>BrowserAdaptor</code>, <code>PocketIEMotoWebKitAdaptor</code>
       and <code>UCWEBAdaptor</code> for more info.
    </p>

    <p>The following examples are the typical component based examples including events
    (transported with AJAX) seen before,
    customized to work with Pocket IE, Motorola Symphony and UCWEB (any other browser work too).
    They all can be <a href="index.jsp">launched outside</a> the Feature Showcase main tree.
    </p>

    <ul>
        <li>Pocket IE 6 (WM 6 and 6.1)
            <p>This browser is poor, slow and buggy (yes DHTML support is very buggy).
            Fortunately is being replaced with a completely new browser, <a href="http://blogs.msdn.com/windowsmobile/archive/2008/11/11/internet-explorer-mobile-6.aspx">IE Mobile 6 (6 on 6)</a>
            a real port of MSIE 6 desktop to mobile. Unfortunately millions of devices have been
            shipped with this browser.
            </p>
            <p>It has <a target="_blank" href="http://blogs.msdn.com/iemobile/archive/2007/05/15/ie-mobile-standards-support.aspx">many limitations</a>,
            for instance basic methods like <code>Node.setAttribute</code> are missing,
            only anchor elements and form controls have mouse events,
            text nodes and comments are not reflected in the DOM tree etc.
            </p>
            <p>But there is good news: rendering engine is not too bad and ... it supports AJAX!</p>

            <p>In spite of this, ItsNat provides real W3C DOM including AJAX to Pocket IE driven by the
            server. Under the hood ItsNat makes all kind of tricks and hacks
            to leverage Pocket IE 6 to the level of any other browser.
            The result is amazing but far of perfect (some limitations are insurmountable).
            </p>

            <p>In Pocket IE mouse events are only received by links and form controls.
            Therefore a link is the way to provide mouse events to an HTML subtree.
            ItsNat simulates bubbling and capturing in Pocket IE, if a link is clicked a fake event
            (in Pocket IE there is no native event object) traverses the DOM tree to ancestors
            dispatching any registered listener (the clicked link is saved in the fake event as
            the target element). This way the link does not need explicit listeners to do this task,
            event listeners can be added on non-link upper elements, so "Joystick Mode" is not
            needed.
            </p>
        </li>
        <li>Motorola Symphony
            <p>This browser based on WebKit is by far better than Pocket IE, in spite of this
               almost only links and form controls can receive events.
               ItsNat also simulates bubbling and capturing in this browser.
            </p>
        </li>
        <li>UCWEB
            <p>This browser is proxy based as Opera Mini or Bolt, the server uses a desktop engine
                to execute JavaScript code and pre-render the pages sent to the thin client (Java and Windows Mobile)
                Similar to Pocket and Symphony, only a small subset of elements can receive events.
            </p>
        </li>
    </ul>
</div>

</body>
</html>
